# Script for computing acoustic indices using the soundecology package.
# Tristan Louth-Robins. 2021-22

# Version 2.7 (January 4th 2023): 
# 2.0 - all three steps now in single script.
# 2.5 - fixed the error in factorisation turning all month variables into a 'Summer' category.
# 2.6 - cleaned up file import code, cleaner and more efficient.
# 2.7 - new function for user input of site variable.

# STEP 1: COMPUTE ACOUSTIC INDICES ----------------------------------------------------------------------------------
# Required libraries -
library(soundecology)
setwd("/Users/tristanlouth-robins/data_science/acoustic_ecology/")

session_path <- "/Users/tristanlouth-robins/data_science/acoustic_ecology/" # set path for raw data import
sub_folder <- "results/lady_bay-22-12/" # <-- destination folder for csv output
data <- "raw_data" # Sub folder containing raw acoustic data:
data_import <- paste(session_path, data, sep = "")

# Function: compute defined index from imported data batch -----------------------------------------
compute_indices <- function(index, site, batch, note){
  # set the destination folder and output
  dest_path <- paste(session_path, sub_folder, sep="/") 
  csv <- paste(site, batch, index, note, sep="_")
  file <- paste(csv, ".csv", sep="")
  dest <- paste(dest_path, file, sep="/")
  multiple_sounds(directory = data_import, 
                  resultfile = dest,
                  soundindex = index,
                  no_cores = "max")
}

bi <-  "bioacoustic_index"
aci <-  "acoustic_complexity"
adi <-  "acoustic_diversity"
aei <- "acoustic_evenness"
ndsi <-  "ndsi"

compute_indices(aei,          # <-- index
                "moth003-23_to_31-12-22-lady_bay_meadow_cove",   # <-- string for site of recording
                0,            # <-- batch number
                "")           # <-- misc. note


# INTERIM STEP: Include site variable for dataset -------------------------------------------------------------------
# Required libraries  -
library(tidyverse)

site_input <- function(file){
  df_input <- read_csv(file)
  site_name <- readline(prompt="Enter site name: ")
  df_output <- mutate(df_input, site = site_name)
  print("Site name assigned and .csv file updated.")
  write_csv(df_output, file)
}

site_input(paste(sub_folder, "moth003-23_to_31-12-22-lady_bay_meadow_cove_0_acoustic_evenness_.csv", sep = ""))

# Meadow cove
# Reef extent 1

# STAGE 2: READ IN RESULTS AND TIDY ----------------------------------------------------------------------------------
# Required libraries  -
library(forcats)
library(stringr)
library(lubridate)
library(chron)

# Function for tidying the imported results -------------------

tidy_data <- function(input) {
  output <- input %>% 
    separate(FILENAME, into = c("date", "time", sep = "_")) %>% 
    mutate(date = gsub("^(.{4})(.*)$", "\\1-\\2", date), date = gsub("^(.{7})(.*)$", "\\1-\\2", date)) %>%
    mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
    mutate(time = gsub("^(.{2})(.*)$", "\\1:\\2", time), time = gsub("^(.{5})(.*)$", "\\1:\\2", time)) %>% 
    mutate(time = chron(times = time)) %>% # coerce chr time string into time data format.
    mutate(mins = format(strptime(time,"%H:%M:%S"), '%M')) %>% 
    mutate(hour = format(strptime(time,"%H:%M:%S"), '%H')) %>% 
    mutate(mins = as.numeric(mins), hour = as.numeric(hour)) %>% 
    select(date, time, INDEX, mins, hour, LEFT_CHANNEL, site) %>% 
    rename(value = LEFT_CHANNEL, index = INDEX, site.name = site) %>% 
    group_by(date) 
  
  output <- output %>% 
    mutate(date = as.character.Date(date)) %>% 
    mutate(date.data = date) %>% 
    separate(date.data, into = c("year", "month", "day", sep = "-")) %>% 
    select(- `-`) 
  
  output <- output[,c("date", "time", "year", "month", "day", "mins", "hour", "index", "value", "site.name")]  
  
  return(output)
}

# Function for creating categorical variables ----------------------

cat_data <- function(tidy_df) {
  cat <- tidy_df %>% 
    # Period of day, defined by range of 'hour' variable. 
    mutate(period = ifelse(hour %in% 0:4, "pre-dawn", 
                           ifelse(hour %in% 5:7, "dawn", 
                                  ifelse(hour %in% 8:11, "morning",
                                         ifelse(hour %in% 12:13, "midday",
                                                ifelse(hour %in% 14:17, "afternoon",
                                                       ifelse(hour %in% 18:19, "dusk", 
                                                              ifelse(hour %in% 20: 23, "night","X"))))))) 
    ) %>% 
    mutate(month = as.numeric(month),
           period = as.factor(period)) %>% 
    # Season, defined by range of 'month' variable.
    mutate(season = ifelse(month %in% c(1,2,12), "Summer",
                           ifelse(month %in% c(3,4,5), "Autumn",
                                  ifelse(month %in% c(6,7,8), "Winter",
                                         ifelse(month %in% c(9,10,11), "Spring","X"))))
    ) %>% 
    mutate(season = as.factor(season))
  
  # re-order factors 
  cat$period <- ordered(cat$period, levels = c("pre-dawn", "dawn", "morning", "midday", "afternoon", "dusk", "night"))
  cat$season <- ordered(cat$season, levels = c("Summer", "Autumn", "Winter", "Spring"))
  
  # re-coerce date variable as date data type:
  cat <- cat %>% 
    mutate(date = as.Date(date, format = "%Y-%m-%d")) %>% 
    # coerce split (individual) date variable as factors
    mutate(year = as.factor(year),
           month = as.factor(month),
           day = as.factor(day)) 
  
  return(cat) 
}  

# Import tabular data for tidying ----------------------------------------------------
import_path <- paste(session_path, sub_folder, sep="/")
setwd(import_path)

# For single datasets, assign the 't.s' variable.
# Enter the file you want to import below:
# file <- "moth003-23_to_31-12-22-lady_bay_meadow_cove_0_acoustic_evenness_.csv"
# t.s <- read_csv(file)

# For multiple batched datasets, assign the 't' variable below:
# The below will pull all csv files stored in the designated sub_folder into a single dataframe.

t <- list.files(pattern="*.csv") %>% 
  map_df(~read_csv(.))

tidy_t <- tidy_data(t)
complete_t <- cat_data(tidy_t)
head(complete_t)

# STAGE 3: WRITE TIDY DATA TO NEW CSV -------------------------------------------------
# For single datasets:
tidy_file <- file %>% str_remove("_.csv") %>% paste("-tidy", ".csv", sep="")

# for merged datasets:
merged_data <- "lady_bay_reef_december_ACI_ADI_AEI.csv"

write_csv(complete_t, merged_data)
