# Required libraries  -
library(forcats)
library(stringr)
library(lubridate)
library(chron)
# Include site variable for dataset --------------------------------------------
setwd(resultswd)
file <- list.files(pattern="*.csv")
site_input <- function(file){
site_name <- readline(prompt="Enter site name: ")
for (i in file) {
print(i)
data <- read_csv(i) %>%
mutate(site = site_name)
print(data)
print("Site name assigned and .csv file updated.")
write_csv(data, i)
}
}
site_input(file)
# Function for tidying the imported results -------------------
tidy_data <- function(input) {
output <- input %>%
separate(FILENAME, into = c("date", "time", sep = "_")) %>%
mutate(date = gsub("^(.{4})(.*)$", "\\1-\\2", date), date = gsub("^(.{7})(.*)$", "\\1-\\2", date)) %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
mutate(time = gsub("^(.{2})(.*)$", "\\1:\\2", time), time = gsub("^(.{5})(.*)$", "\\1:\\2", time)) %>%
mutate(time = chron(times = time)) %>% # coerce chr time string into time data format.
mutate(mins = format(strptime(time,"%H:%M:%S"), '%M')) %>%
mutate(hour = format(strptime(time,"%H:%M:%S"), '%H')) %>%
mutate(mins = as.numeric(mins), hour = as.numeric(hour)) %>%
select(date, time, INDEX, mins, hour, LEFT_CHANNEL, site) %>%
rename(value = LEFT_CHANNEL, index = INDEX, site.name = site) %>%
group_by(date)
output <- output %>%
mutate(date = as.character.Date(date)) %>%
mutate(date.data = date) %>%
separate(date.data, into = c("year", "month", "day", sep = "-")) %>%
select(- `-`)
output <- output[,c("date", "time", "year", "month", "day", "mins", "hour", "index", "value", "site.name")]
return(output)
}
# Function for creating categorical variables ----------------------
cat_data <- function(tidy_df) {
cat <- tidy_df %>%
# Period of day, defined by range of 'hour' variable.
mutate(period = ifelse(hour %in% 0:4, "pre-dawn",
ifelse(hour %in% 5:7, "dawn",
ifelse(hour %in% 8:11, "morning",
ifelse(hour %in% 12:13, "midday",
ifelse(hour %in% 14:17, "afternoon",
ifelse(hour %in% 18:19, "dusk",
ifelse(hour %in% 20: 23, "night","X")))))))
) %>%
mutate(month = as.numeric(month),
period = as.factor(period)) %>%
# Season, defined by range of 'month' variable.
mutate(season = ifelse(month %in% c(1,2,12), "Summer",
ifelse(month %in% c(3,4,5), "Autumn",
ifelse(month %in% c(6,7,8), "Winter",
ifelse(month %in% c(9,10,11), "Spring","X"))))
) %>%
mutate(season = as.factor(season))
# re-order factors
cat$period <- ordered(cat$period, levels = c("pre-dawn", "dawn", "morning", "midday", "afternoon", "dusk", "night"))
cat$season <- ordered(cat$season, levels = c("Summer", "Autumn", "Winter", "Spring"))
# re-coerce date variable as date data type:
cat <- cat %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
# coerce split (individual) date variable as factors
mutate(year = as.factor(year),
month = as.factor(month),
day = as.factor(day))
return(cat)
}
# Import tabular data for tidying ----------------------------------------------------
import_path <- resultswd
setwd(import_path)
# For single datasets, assign the 't.s' variable.
# Enter the file you want to import below:
file <- "MOTH2_01-07-2023_mf_sheoak_0_acoustic_diversity_.csv"
t.s <- read_csv(file)
tidy_t <- tidy_data(t.s)
complete_t <- cat_data(tidy_t)
head(complete_t)
# STAGE 3: WRITE TIDY DATA TO NEW CSV ------------------------------------------
# For single datasets:
tidy_file <- file %>% str_remove("_.csv") %>% paste("-tidy", ".csv", sep="")
write_csv(complete_t, tidy_file)
american <- readWave("data-audio/WITA_sup1/other/american_river.WAV")
setwd("/Users/tristanlouth-robins/Documents/Documents - MacBook Pro/R Studio/acoustic_ecology_tests/Wrangling_In_The-Antipodes/")
american <- readWave("data-audio/WITA_sup1/other/american_river.WAV")
acoustic_diversity(american, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
hayflat <- readWave("data-audio/WITA_sup1/other/hayflat.WAV")
acoustic_diversity(hayflat, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
rocky <- readWave("data-audio/WITA_sup1/other/rocky_river.WAV")
acoustic_diversity(rocky, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
acoustic_diversity(rocky, max_freq = 10000, db_threshold = -20,
freq_step = 250, shannon = TRUE)
acoustic_diversity(hayflat, max_freq = 10000, db_threshold = -20,
freq_step = 250, shannon = TRUE)
acoustic_diversity(american, max_freq = 10000, db_threshold = -20,
freq_step = 250, shannon = TRUE)
yank <- readWave("data-audio/WITA_sup1/other/yank.WAV")
acoustic_diversity(yank, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
american <- readWave("data-audio/WITA_sup1/other/mono/american_river.WAV")
hayflat <- readWave("data-audio/WITA_sup1/other/mono/hayflat.WAV")
rocky <- readWave("data-audio/WITA_sup1/other/mono/rocky_river.WAV")
yank <- readWave("data-audio/WITA_sup1/other/mono/yank.WAV")
dawn <- readWave("data-audio/WITA_sup1/other/mono/dawn.WAV")
american <- readWave("data-audio/WITA_sup1/other/mono/american_river.WAV")
hayflat <- readWave("data-audio/WITA_sup1/other/mono/hayflat.WAV")
rocky <- readWave("data-audio/WITA_sup1/other/mono/rocky.WAV")
yank <- readWave("data-audio/WITA_sup1/other/mono/yank.WAV")
dawn <- readWave("data-audio/WITA_sup1/other/mono/dawn.WAV")
file <- "american"
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
file <- "american"
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
file <- american
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
file <- hayflat
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
file <- rocky
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
file <- yank
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
file <- dawn
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
# Visualise the frequency bins of given audio
library(seewave)
library(tuneR)
spec_dawn <- meanspec(dawn, f=24000, plot=T)
fbands(spec_dawn, bands=10)
dawn
spec_dawn <- meanspec(dawn, f=24000, plot=T)
# Visualise the frequency bins of given audio
library(seewave)
library(tuneR)
spec_dawn <- meanspec(dawn, f=24000, plot=T)
fbands(spec_dawn, bands=10)
spec_dawn <- meanspec(dawn, f=10000, plot=T)
fbands(spec_dawn, bands=10)
spec_dawn <- meanspec(american, f=10000, plot=T)
fbands(spec_dawn, bands=10)
spec_dawn <- meanspec(rocky, f=10000, plot=T)
fbands(spec_dawn, bands=10)
fbands(spec_dawn, bands=5)
spec_dawn <- meanspec(rocky, f=10000, plot=T)
fbands(spec_dawn, bands=50)
spec_dawn <- meanspec(dawn, f=10000, plot=T)
fbands(spec_dawn, bands=50)
spec_dawn <- meanspec(dawn, f=24000, plot=T)
fbands(spec_dawn, bands=50)
spec_dawn <- meanspec(yank, f=24000, plot=T)
fbands(spec_dawn, bands=50)
spec_dawn <- meanspec(yank, f=16000, plot=T)
fbands(spec_dawn, bands=50)
fbands(spec_dawn, bands=10)
spec_dawn <- meanspec(dawn, f=16000, plot=T)
fbands(spec_dawn, bands=10)
spec <- meanspec(dawn, f=16000, plot=T)
fbands(spec, bands=10)
markets <- readWave("data-audio/WITA_sup1/other/mono/markets.WAV")
file <- markets
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
spec <- meanspec(markets, f=16000, plot=T)
fbands(spec, bands=10)
insects <- readWave("data-audio/WITA_sup1/other/mono/insects.WAV")
file <- insects
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
spec <- meanspec(insects, f=16000, plot=T)
fbands(spec, bands=10)
library(tidyverse)
setwd("/Users/tristanlouth-robins/Documents/Documents - MacBook Pro/R Studio/acoustic_ecology_tests/Wrangling_In_The-Antipodes/")
library(ggplot2)
# VISUALISATIONS
viz_scatter <- function(data) {
data %>%
ggplot() +
geom_point(aes(x = time, y = value)) +
facet_wrap(~date)
}
vis_dist <- function(data) {
data %>%
ad_creek %>%
ggplot() +
geom_histogram(aes(x = value))
}
viz_scatter(ad_sheoak)
library(soundecology)
american <- readWave("data-audio/WITA_sup1/other/mono/american_river.WAV")
hayflat <- readWave("data-audio/WITA_sup1/other/mono/hayflat.WAV")
rocky <- readWave("data-audio/WITA_sup1/other/mono/rocky.WAV")
yank <- readWave("data-audio/WITA_sup1/other/mono/yank.WAV")
dawn <- readWave("data-audio/WITA_sup1/other/mono/dawn.WAV")
markets <- readWave("data-audio/WITA_sup1/other/mono/markets.WAV")
insects <- readWave("data-audio/WITA_sup1/other/mono/insects.WAV")
file <- insects
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
spectral_viz <- function(file, range) {
meanspec(insects, f=range)
}
spectral_viz(hayflat, 16000)
# Visualise the frequency bins of given audio
library(seewave)
library(tuneR)
spectral_viz <- function(file, range) {
meanspec(insects, f=range)
}
spectral_viz(hayflat, 16000)
spectral_viz(american, 16000)
spectral_viz(hayflat, 16000)
spectral_viz(american, 16000)
spectral_viz(rocky, 16000)
spectral_viz(hayflat, 16000)
spectral_viz <- function(file, range) {
meanspec(insects, f=range, plot=T)
}
spectral_viz(hayflat, 16000)
spectral_viz(american, 16000)
spectral_viz(rocky, 16000)
spectral_viz(hayflat, 16000)
spectral_viz(american, 16000)
spectral_viz(rocky, 16000)
spectral_viz <- function(file, range) {
meanspec(file, f=range, plot=T)
}
spectral_viz(hayflat, 16000)
spectral_viz(american, 16000)
spectral_viz(rocky, 16000)
spectral_viz(insects, 16000)
spectral_viz(yank, 16000)
spectral_viz(markets, 16000)
spectral_viz(dawn, 16000)
discrete <- function(file, bins) {
fbands(file, bands=bins)
}
discrete(spectral_viz(hayflat, 16000))
discrete(spectral_viz(hayflat, 16000), 10)
discrete <- function() {
fbands(file, bands=bins)
}
spectral_viz(hayflat, 16000) %>% discrete()
discrete <- function() {
fbands(bands=10)
}
spectral_viz(hayflat, 16000) %>% discrete()
discrete <- function(file) {
fbands(file, bands=10)
}
(spec.hf <- spectral_viz(hayflat, 16000))
discrete(spec.hf)
spec.hf
spec.hf <- spectral_viz(hayflat, 16000)
discrete(spec.hf)
discrete(spec.ar)
spec.ar <- spectral_viz(american, 16000)
discrete(spec.ar)
# Moderate ADI
spec.rk <- spectral_viz(rocky, 16000)
discrete(spec.rk)
spec.in <- spectral_viz(insects, 16000)
discrete(spec.in)
spec.yk <- spectral_viz(yank, 16000)
discrete(spec.yk)
discrete(spec.mk)
# High ADI
spec.mk <- spectral_viz(markets, 16000)
discrete(spec.mk)
spec.dw <- spectral_viz(dawn, 16000)
discrete(spec.dw)
# Very low ADI
spec.hf <- spectral_viz(hayflat, 16000)
discrete(spec.hf)
spec.ar <- spectral_viz(american, 16000)
discrete(spec.ar)
# Moderate ADI
spec.rk <- spectral_viz(rocky, 16000)
discrete(spec.rk)
spec.in <- spectral_viz(insects, 16000)
discrete(spec.in)
spec.yk <- spectral_viz(yank, 16000)
discrete(spec.yk)
# High ADI
spec.mk <- spectral_viz(markets, 16000)
discrete(spec.mk)
spec.dw <- spectral_viz(dawn, 16000)
discrete(spec.dw)
# 1. spectral_viz: spectral analysis of given file
spectral_viz <- function(file, range) {
meanspec(file, f=range, plot=T)
}
# 2. discrete: discretise spectral analysis into frequency bins --
discrete <- function(spectral_analysis) {
fbands(spectral_analysis, bands=10)
}
# 3. compute the ADI for given soundfile --
compute_adi <- function(file) {
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
}
# 3. compute the ADI for given soundfile --
compute_adi <- function(file) {
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
}
compute_adi(hayflat)
compute_adi(american) # Acoustic Diversity Index: 0.012438
compute_adi(rocky) #
discrete(spec.in)
compute_adi(insects) # Acoustic Diversity Index: 2.113494
compute_adi(yank) # Acoustic Diversity Index: 2.305617
compute_adi(markets)
compute_adi(dawn) # Acoustic Diversity Index: 3.270205
sheoak_data_20db <- read_csv('data/sheoak-step50thresh20.csv')
ad_sheoak <-
sheoak_data %>%
filter(index == 'acoustic_diversity', site.name == 'mf_sheoak')
library(ggplot2)
# VISUALISATIONS
viz_scatter <- function(data) {
data %>%
ggplot() +
geom_point(aes(x = time, y = value)) +
facet_wrap(~date)
}
vis_dist <- function(data) {
data %>%
ad_creek %>%
ggplot() +
geom_histogram(aes(x = value))
}
viz_scatter(ad_sheoak)
vis_dist(ad_sheoak)
ad_sheoak <-
sheoak_data %>%
filter(index == 'acoustic_diversity', site.name == 'mf_sheoak')
library(ggplot2)
# VISUALISATIONS
viz_scatter <- function(data) {
data %>%
ggplot() +
geom_point(aes(x = time, y = value)) +
facet_wrap(~date)
}
vis_dist <- function(data) {
data %>%
ad_creek %>%
ggplot() +
geom_histogram(aes(x = value))
}
viz_scatter(ad_sheoak)
vis_dist(ad_sheoak)
vis_dist <- function(data) {
data %>%
ggplot() +
geom_histogram(aes(x = value))
}
viz_scatter(ad_sheoak)
vis_dist(ad_sheoak)
# import soundfiles --
american <- readWave("data-audio/WITA_sup1/other/mono/american_river.WAV")
hayflat <- readWave("data-audio/WITA_sup1/other/mono/hayflat.WAV")
rocky <- readWave("data-audio/WITA_sup1/other/mono/rocky.WAV")
yank <- readWave("data-audio/WITA_sup1/other/mono/yank.WAV")
dawn <- readWave("data-audio/WITA_sup1/other/mono/dawn.WAV")
markets <- readWave("data-audio/WITA_sup1/other/mono/markets.WAV")
insects <- readWave("data-audio/WITA_sup1/other/mono/insects.WAV")
# Visualise the frequency bins of soundfiles --
library(seewave)
library(tuneR)
# 1. spectral_viz: spectral analysis of given file
spectral_viz <- function(file, range) {
meanspec(file, f=range, plot=T)
}
# 2. discrete: discretise spectral analysis into frequency bins --
discrete <- function(spectral_analysis) {
fbands(spectral_analysis, bands=10)
}
# High ADI
spec.mk <- spectral_viz(markets, 16000)
discrete(spec.mk)
games <- readWave("data-audio/WITA_sup1/other/mono/games.WAV")
# Visualise the frequency bins of soundfiles --
library(seewave)
library(tuneR)
# 1. spectral_viz: spectral analysis of given file
spectral_viz <- function(file, range) {
meanspec(file, f=range, plot=T)
}
# 2. discrete: discretise spectral analysis into frequency bins --
discrete <- function(spectral_analysis) {
fbands(spectral_analysis, bands=10)
}
# 3. compute the ADI for given soundfile --
compute_adi <- function(file) {
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
}
spec.ga <- spectral_viz(games, 16000)
discrete(spec.ga)
spec.ga <- spectral_viz(games, 16000)
discrete(spec.ga)
compute_adi(games)
library(soundecology)
library(soundecology)
compute_adi(games)
chtown <- readWave("data-audio/WITA_sup1/other/mono/chinatown.WAV")
# High ADI
spec.ct <- spectral_viz(chtown, 16000)
discrete(spec.ct)
compute_adi(chtown) # Acoustic Diversity Index: 3.26
pasat <- readWave("data-audio/WITA_sup1/other/mono/pasat.WAV")
spec.ps <- spectral_viz(pasat, 16000)
discrete(spec.ps)
compute_adi(pasat) # Acoustic Diversity Index: 3.26
bunga <- readWave("data-audio/WITA_sup1/other/mono/bungadawn.WAV")
spec.bg <- spectral_viz(bunga, 16000)
discrete(spec.bg)
compute_adi(bunga) # Acoustic Diversity Index: 3.670878
cascade <- readWave("data-audio/WITA_sup1/other/audiomoth/mf_beach-AD_2.30-20230708_073000.WAV")
library(tidyverse)
setwd("/Users/tristanlouth-robins/Documents/Documents - MacBook Pro/R Studio/acoustic_ecology_tests/Wrangling_In_The-Antipodes/")
library(soundecology)
# Visualise the frequency bins of soundfiles --
library(seewave)
library(tuneR)
# 1. spectral_viz: spectral analysis of given file
spectral_viz <- function(file, range) {
meanspec(file, f=range, plot=T)
}
# 2. discrete: discretise spectral analysis into frequency bins --
discrete <- function(spectral_analysis) {
fbands(spectral_analysis, bands=10)
}
# 3. compute the ADI for given soundfile --
compute_adi <- function(file) {
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 50, shannon = TRUE)
}
cascade <- readWave("data-audio/WITA_sup1/other/audiomoth/mf_beach-AD_2.30-20230708_073000.WAV")
cascade <- readWave("data-audio/WITA_sup1/other/audiomoth/mono/mf_beach-AD_2.30-20230708_073000.WAV")
cascade <- readWave("data-audio/WITA_sup1/audiomoth/mono/mf_beach-AD_2.30-20230708_073000.WAV")
spec.ca <- spectral_viz(cascade, 16000)
discrete(spec.ca)
compute_adi(cascade) # Acoustic Diversity Index: 3.26
spec.ca <- spectral_viz(cascade, 16000)
discrete(spec.ca)
creek2 <- readWave("data-audio/WITA_sup1/audiomoth/mono/mf_beach-AD_0.00_20db_-20230702_155000.WAV")
spec.ca2 <- spectral_viz(creek2, 16000)
discrete(spec.ca2)
compute_adi(creek2) # Acoustic Diversity Index: 3.26
# 3. compute the ADI for given soundfile --
compute_adi <- function(file) {
acoustic_diversity(file, max_freq = 10000, db_threshold = -40,
freq_step = 50, shannon = TRUE)
}
compute_adi(creek2) # Acoustic Diversity Index: 1.07
compute_adi(creek1) #
creek1 <- readWave("data-audio/WITA_sup1/audiomoth/mono/mf_beach-AD_2.30-20230708_073000.WAV")
compute_adi(creek1) #
# 3. compute the ADI for given soundfile --
compute_adi <- function(file) {
acoustic_diversity(file, max_freq = 10000, db_threshold = -10,
freq_step = 50, shannon = TRUE)
}
compute_adi(creek1) # Acoustic Diversity Index:
compute_adi(creek2) # Acoustic Diversity Index:
# 3. compute the ADI for given soundfile --
compute_adi <- function(file) {
acoustic_diversity(file, max_freq = 10000, db_threshold = -20,
freq_step = 1000, shannon = TRUE)
}
compute_adi(creek1) # Acoustic Diversity Index:
compute_adi(creek2) # Acoustic Diversity Index:
# 3. compute the ADI for given soundfile --
compute_adi <- function(file) {
acoustic_diversity(file, max_freq = 1000, db_threshold = -20,
freq_step = 1000, shannon = TRUE)
}
compute_adi(creek1) # Acoustic Diversity Index:
compute_adi(creek2) # Acoustic Diversity Index:
# 3. compute the ADI for given soundfile --
compute_adi <- function(file) {
acoustic_diversity(file, max_freq = 1000, db_threshold = -20,
freq_step = 10, shannon = TRUE)
}
compute_adi(creek1) # Acoustic Diversity Index:
compute_adi(creek2) # Acoustic Diversity Index:
?acoustic_diversity
# 3. compute the ADI for given soundfile --
compute_adi <- function(file) {
acoustic_diversity(file, max_freq = 1000, db_threshold = -20,
freq_step = 10, shannon = F)
}
compute_adi(creek1) # Acoustic Diversity Index:
compute_adi(creek2) # Acoustic Diversity Index:
